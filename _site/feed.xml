<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://iteducate.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://iteducate.github.io/" rel="alternate" type="text/html" /><updated>2021-10-22T21:09:44+03:00</updated><id>https://iteducate.github.io/feed.xml</id><title type="html">Blog Notes</title><subtitle>Personal website with .</subtitle><author><name>Ivan Denisenko</name></author><entry><title type="html">Структура протокола IPv6</title><link href="https://iteducate.github.io/networks/ipv6_prot/" rel="alternate" type="text/html" title="Структура протокола IPv6" /><published>2021-10-14T09:00:00+03:00</published><updated>2021-10-14T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/ipv6_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/ipv6_prot/">&lt;p&gt;Протокол IPv6 пришел на замену протоколу IPv4 и хотя в настоящее время IPv4 всё еще везде используется, придет время и протокол IPv6 вытеснит своего предшественника полностью.&lt;/p&gt;

&lt;p&gt;Первое, что стоит упомянуть когда рассматривают протокол IPv6 - это измененная структура адреса и количество возможных адресов. Если в IPv4 используется &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2^32&lt;/code&gt; адресов, то в новой версии это число достигает невероятных значений &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2^128&lt;/code&gt;. Структура адреса выглядит следующим образом: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2001:1536:a0b8:3491:c800:00ef:fe74:0c00&lt;/code&gt; - 8 хекстетов, разделенных символом &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;типы-адресов-ipv6&quot;&gt;Типы адресов IPv6&lt;/h2&gt;

&lt;p&gt;Всего существует три основных типа IPv6 адресов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unicast&lt;/strong&gt; адреса&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anycast&lt;/strong&gt; адреса&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multicast&lt;/strong&gt; адреса&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В отличие от IPv4, в IPv6 нет broadcast адресов. Однако, группа multicast адресов &lt;em&gt;“all nodes”&lt;/em&gt; делает ту же работу, что и broadcast адреса.&lt;/p&gt;

&lt;h3 id=&quot;unicast&quot;&gt;Unicast&lt;/h3&gt;

&lt;p&gt;IPv6 unicast адреса работают в точности так же как и в IPv4. Данные адреса определяют один интерфейс или устройство. Существует три типа IPv6 unicast адресов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Global&lt;/strong&gt; адреса - это те же адреса, что и публичные адреса в IPv4. Они глобально маршрутизируются и могут использоваться при коммуникации через сеть Интернет. В настоящее время вся глобальная одноадресная адресация выделяется из префиксного блока &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2000::/3&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ipv6/global_unicast.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ipv6/global_unicast.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Global address structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unique local unicast&lt;/strong&gt; адреса - адреса, которые в IPv4 определены как &lt;em&gt;“серые”&lt;/em&gt;, т.е. адреса, описанные в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1918.html&quot;&gt;RFC 1918&lt;/a&gt;. Данные адреса маршрутизируются в пределах внутренней коммуникации организации и не маршрутизируются в сети Интернет. &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4193.html&quot;&gt;RFC 4193&lt;/a&gt; определяет блок префиксов &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fc00::/7&lt;/code&gt; для уникальной локальной одноадресной адресации. Данные адреса всегда начинаются с двоичного значения &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1111 110&lt;/code&gt;, которое соответствует префиксу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fc00::/7&lt;/code&gt;. Восьмой бит - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;бит L&lt;/code&gt; в настоящее время установлен в 1, чтобы указать, что адрес назначен локально. Установка бита L на 0 еще не определена и зарезервирована для использования в будущем. Объединение префикса (&lt;em&gt;первых 7 бит&lt;/em&gt;) и бита L создает два потенциальных адресных блока:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fc00::/8&lt;/code&gt;: зарезервировано для будущего использования&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd00::/8&lt;/code&gt;: локальная одноадресная адресация&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ipv6/unique_local.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ipv6/unique_local.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Unique local address structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Link-local&lt;/strong&gt; адреса - немаршрутизируемые адреса, используются для коммуникации в пределах одного непосредственно подключенного канала. Основное назначение данных адресов - обнаружение соседей и определение дубликата адресов. Адреса выделяются из префиксного блока &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fe80::/10&lt;/code&gt;. Данные адреса могут назначаться как вручную, так и динамически с использованием механизма &lt;strong&gt;SLAAC&lt;/strong&gt; (&lt;em&gt;stateless address autoconfiguration&lt;/em&gt;). При использовании SLAAC часть Interface ID выводится из MAC-адреса модификацией формата EUI-64.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ipv6/link_local.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ipv6/link_local.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Link local address structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;anycast&quot;&gt;Anycast&lt;/h3&gt;

&lt;p&gt;Anycast адреса представляют скорее сервис нежели чем отдельное устройство, поэтому один адрес может быть назначен разным устройствам, предоставляющим один и тот же сервис. Основное предназначение anycast адресов - обеспечение отказоустойчивости.&lt;/p&gt;

&lt;p&gt;На следующей схеме приведён пример того как может выглядеть это в реальности&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ipv6/anycast.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ipv6/anycast.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Anycast&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;В сети имеется два сервера, которые имеют идентичную адресацию, но физически расположены в разных местах. В зависимости от того где находится клиент, трафик пойдет к ближайшему серверу, опираясь на таблицу маршрутизации.&lt;/p&gt;

&lt;p&gt;В случае если в сети произойдет падение одного из маршрутизаторов, находящихся рядом с серверами, произойдет перестроение пути следования трафика для одного из клиентов и трафик для этого клиента пойдет по новому пути. В этом случае оба клиента будут обращаться к одному и тому же серверу.&lt;/p&gt;

&lt;p&gt;Какого определённого формата для данных типов адресов не существует, поэтому теоретически любой unicast адрес может быть anycast. Для корректной работы anycast адресов может быть желательно отключать механизм определения дубликата адресов (&lt;em&gt;DAD - Duplicate Address Detection&lt;/em&gt;). В операционной системе Cisco IOS и Cisco IOS XE механизм DAD отключается для всего префикса, делается это следующей командой:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Cisco_CSR1000v(config)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;interface gigabitEthernet 1
&lt;span class=&quot;gp&quot;&gt;Cisco_CSR1000v(config-if)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ipv6 address 2001:abcd:1111::1/64 anycast 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Для операционной системы Cisco IOS XR механизм DAD отключается для всего интерфейса (&lt;em&gt;включая префиксы link-local&lt;/em&gt;) с помощью команды:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;RP/0/0/CPU0:Cisco_XRv(config)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;interface gigabitEthernet 0/0/0/0
&lt;span class=&quot;gp&quot;&gt;RP/0/0/CPU0:Cisco_XRv(config-if)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ipv6 nd dad attempts 0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;multicast&quot;&gt;Multicast&lt;/h3&gt;

&lt;p&gt;Multicast адреса определяют не одно устройство, а группу устройств - multicast группу. Multicast адреса не могут выступать в качестве адреса источника в пакете. В IPv6 multicast адреса имеют различное назначение: передача информации о протоколе маршрутизации, обнаружение соседних устройств, разрешение IPv6-адресов. Более подробно об этом будет описано в статье по протоколу &lt;strong&gt;&lt;em&gt;Neighbor Discovery Protocol&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ipv6/multicast.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ipv6/multicast.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Multicast address structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Флаг &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T - transient&lt;/code&gt; имеет два возможных значения:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; - постоянный адрес, который широко известен и присваивается IANA&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; - временный адрес, используется для целей тестирования&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Поле &lt;strong&gt;Scope&lt;/strong&gt; используется для того, чтобы маршрутизатор мог определить является ли multicast адрес маршрутизируемым. Все диапазоны таких адресов описаны в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4291.html&quot;&gt;RFC 4291&lt;/a&gt;. Краткая выдержка представлена в таблице ниже.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Типы диапазонов&lt;/th&gt;
      &lt;th&gt;IPv6 префикс&lt;/th&gt;
      &lt;th&gt;Описание&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Interface-Local&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff01&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Link-Local&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff02&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Admin-Local&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff04&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Site-Local&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff05&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Organization-Local&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff08&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Global&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;ff0е&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="ipv6" /><summary type="html">Протокол IPv6 пришел на замену протоколу IPv4 и хотя в настоящее время IPv4 всё еще везде используется, придет время и протокол IPv6 вытеснит своего предшественника полностью.</summary></entry><entry><title type="html">Структура протокола UDP</title><link href="https://iteducate.github.io/networks/udp_prot/" rel="alternate" type="text/html" title="Структура протокола UDP" /><published>2021-10-10T09:00:00+03:00</published><updated>2021-10-10T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/udp_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/udp_prot/">&lt;p&gt;User Datagram Protocol или UDP описан в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc768.html&quot;&gt;RFC 768&lt;/a&gt; предоставляет услуги доставки пакетов без подключения с максимальными усилиями. Главное преимущество протокола UDP - отсутствие траты времени на установку соединения с удаленным узлом. Приложения, использующие UDP вместо TCP, понимают это основное преимущество в производительности и поэтому используют именно UDP.&lt;/p&gt;

&lt;p&gt;Второе преимущество протокола UDP - размер заголовка, он намного меньше, чем у протокола TCP. Ниже представлена структура заголовка&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/udp/structure_udp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/udp/structure_udp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;UDP Header Structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Поля &lt;strong&gt;Source&lt;/strong&gt; и &lt;strong&gt;Destination&lt;/strong&gt; port идентичны тем, которые есть у протокола TCP, размер данных полей также 16 бит.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/udp/src_dst_ports.png&quot;&gt;
          &lt;img src=&quot;/assets/images/udp/src_dst_ports.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Source and Destination Ports&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;UDP Length&lt;/strong&gt; - 16-битное поле, указывающее длину всего сегмента в байтах (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udp header&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udp payload&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/udp/length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/udp/length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Checksum&lt;/strong&gt; - 16-битное &lt;em&gt;опциональное (необязательно)&lt;/em&gt; поле, проверяющее чексумму всего сегмента. Когда поле неиспользуется, то оно заполняется нулями.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/udp/checksum.png&quot;&gt;
          &lt;img src=&quot;/assets/images/udp/checksum.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Checksum&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Полностью изучить протокол можно скачав данный &lt;a href=&quot;/assets/pcap/udp.pcapng&quot;&gt;дамп&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="udp" /><summary type="html">User Datagram Protocol или UDP описан в RFC 768 предоставляет услуги доставки пакетов без подключения с максимальными усилиями. Главное преимущество протокола UDP - отсутствие траты времени на установку соединения с удаленным узлом. Приложения, использующие UDP вместо TCP, понимают это основное преимущество в производительности и поэтому используют именно UDP.</summary></entry><entry><title type="html">Структура протокола TCP</title><link href="https://iteducate.github.io/networks/tcp_prot/" rel="alternate" type="text/html" title="Структура протокола TCP" /><published>2021-10-09T09:00:00+03:00</published><updated>2021-10-09T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/tcp_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/tcp_prot/">&lt;p&gt;Transmission Control Protocol или TCP описан в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc793.html&quot;&gt;RFC 793&lt;/a&gt;, обеспечивает приложениям надежную службу, ориентированную на подключение.&lt;/p&gt;

&lt;p&gt;Протокол TCP &lt;em&gt;похож&lt;/em&gt; на телефонный звонок, в котором сначала устанавливается соединение, затем передаются данные, и в конце осуществляется отключение когда передача данных завершена.&lt;/p&gt;

&lt;p&gt;TCP использует три основных механизма, описанных ниже:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Пакеты маркируются порядковыми номерами (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequence number&lt;/code&gt;). Это позволяет службе TCP с приёмной стороны восстановить корректную последовательность пакетов, прежде чем отправлять их конечному приложению.&lt;/li&gt;
  &lt;li&gt;Для обеспечения надежности TCP использует механизмы подтверждения, чексуммы и таймеров (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acknowledment&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checksum&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timers&lt;/code&gt;). Получатель может уведомить отправителя о том, что какой-то пакет из последовательности не пришел или содержит ошибки, или отправитель может предположить, что пакет не дошел до получателя, если получатель не прислал подтверждение получателю через определенное время.&lt;/li&gt;
  &lt;li&gt;TCP использует механизм “плавающего окна” (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowing&lt;/code&gt;) для регулирования потока пакетов. Windowing уменьшает шанс того, что пакет будет отброшен приемной стороной из-за переполнения буфера.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Заголовок TCP следует сразу за данными прикладного уровня, он содержит поля необходимые для работы механизмов, которые описаны выше, а также определяет порты, которые в свою очередь определяют приложения источника и назначения. Данные с заголовком TCP затем инкапсулируются в заголовок IP.&lt;/p&gt;

&lt;p&gt;Структура протокола TCP выглядит следующим образом&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/structure_tcp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/structure_tcp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;TCP Header Structure&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; и &lt;strong&gt;Destination&lt;/strong&gt; порты - 16-битные поля, определяющие приложения источника и назначения для инкапсулированных данных. RFC 1700 определяет все номера для портов (&lt;em&gt;общего и не общего назначения&lt;/em&gt;).&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;strong&gt;&lt;code&gt;Сокет&lt;/code&gt;&lt;/strong&gt; - сочетание порта (&lt;i&gt;источника/назначения&lt;/i&gt;) и соответствующего IP-адреса. Сокет уникально определяет каждое приложение в сети.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/src_dst_ports.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/src_dst_ports.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Source and Destination Ports&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Sequence Number&lt;/strong&gt; - 32-битное поле, определяет где инкапсулированные данные находятся внутри общего потока отправителя. Например, если порядковый номер сегмента 1234 и сегмент содержит 512 байт данных, то следующий сегмент должен иметь порядковый номер &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234 + 512 = 1746&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ниже представлена вырезка из трафика, в котором sequence number равен &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;337&lt;/code&gt;, ожидаемый следующий порядковый номер должен быть &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;390&lt;/code&gt;, который состоить из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq number&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP Payload&lt;/code&gt; (&lt;em&gt;337 + 53 = 390&lt;/em&gt;)&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/tcp_seq_1.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/tcp_seq_1.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Sequence Number 1&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;А вот вторая вырезка, которая подтверждает ожидаемый в предыдущем пакете порядковый номер.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/tcp_seq_2.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/tcp_seq_2.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Sequence Number 2&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgment Number&lt;/strong&gt; - 32-битное поле, определяет порядковый номер, который источник ожидает получить от получателя в следующий раз. Если устройство получает номер подтверждения, который не соответствует следующему порядковому номеру, который он собирается отправить (&lt;em&gt;или отправил&lt;/em&gt;), то это будет означать, что пакеты были утеряны.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Header Length&lt;/strong&gt; или еще данное поле называют &lt;em&gt;Data Offset&lt;/em&gt; - 4-битное поле, определяющее длину заголовка &lt;em&gt;в 32-битных словах&lt;/em&gt;. Данное поле очень важно, т.к. оно позволяет определить начало данных, потому что поле &lt;em&gt;Options&lt;/em&gt; имеет переменную длину.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/header_length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/header_length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Header Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Reserved&lt;/strong&gt; - 4-битное поле, которое всегда заполнено нулями.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/reserved.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/reserved.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Reserved&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt; - 8 однобитовых флагов, которые используются для управления потоком данных и контроля подключения. Флаги слева направо:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;CWR&lt;/strong&gt; - Congestion Window Reduced&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;ECE&lt;/strong&gt; - ECN-Echo&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;URG&lt;/strong&gt; - Urgent&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt; - Acknowledment&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;PSH&lt;/strong&gt; - Push&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;RST&lt;/strong&gt; - Reset&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;SYN&lt;/strong&gt; - Synchronize&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;FIN&lt;/strong&gt; - Final&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/flags.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/flags.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Flags&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Window Size&lt;/strong&gt; - 16-битное поле, которое используется для контроля потока. Данное поле определяет количество байт, которое отправитель сегмента примет от узла на другом конце соединения, прежде чем этот узел  прекратит передачу, ожидая подтверждения.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/window.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/window.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Window Size&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Window вычисляется путём умножения значения &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt; на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window size scaling factor&lt;/code&gt;, в случае выше получаем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8181 * 32 = 261792&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checksum&lt;/strong&gt; - - 16-битное поле, позволяющее обнаружить ошибку в заголовке и инкапсулированных данных.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/checksum.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/checksum.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Checksum&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Urgent Pointer&lt;/strong&gt; - 16-битное поле, используется только в случае использования флага &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URG&lt;/code&gt;. Значение данного поля добавляется к Sequence Number тем самым указывая на окончание срочных данных.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/tcp/urgent.png&quot;&gt;
          &lt;img src=&quot;/assets/images/tcp/urgent.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Urgent Pointer&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt; - как следует из названия, данное поле определяет опции в процессе TCP. Наиболее часто используемая опция - Maximum Segment Size (&lt;strong&gt;&lt;em&gt;MSS&lt;/em&gt;&lt;/strong&gt;), которая информирует получателя о наибольшем размере сегмента, который отправитель готов принять. Оставшаяся часть поля заполняется нулями до выравнивания до значения 4 байт.&lt;/p&gt;

&lt;p&gt;Более подробно каждое поле можно рассмотреть, скачав данный &lt;a href=&quot;/assets/pcap/tcp.pcapng&quot;&gt;дамп&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="tcp" /><summary type="html">Transmission Control Protocol или TCP описан в RFC 793, обеспечивает приложениям надежную службу, ориентированную на подключение.</summary></entry><entry><title type="html">Структура протокола ICMP</title><link href="https://iteducate.github.io/networks/icmp_prot/" rel="alternate" type="text/html" title="Структура протокола ICMP" /><published>2021-10-07T09:00:00+03:00</published><updated>2021-10-07T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/icmp_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/icmp_prot/">&lt;p&gt;Internet Control Message Protocol или просто ICMP описан в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc792.html&quot;&gt;RFC 792&lt;/a&gt;. Данный протокол определяет набор различных сообщений, целью которых является управление сетью.&lt;/p&gt;

&lt;p&gt;ICMP сообщения могут классифицироваться как &lt;em&gt;сообщения об ошибках&lt;/em&gt;, а также как сообщения типа &lt;em&gt;“запрос - ответ”&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot; align=&quot;center&quot;&gt;
graph TD
 C{ICMP}
    C --&amp;gt; D[Error message]
    C --&amp;gt; E[Query-Response]
&lt;/div&gt;

&lt;p&gt;Ниже представлен основной формат пакета ICMP&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/icmp/structure_icmp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/icmp/structure_icmp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Структура протокола ICMP&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Пакеты ICMP определяются по их типу (&lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt;), однако, большинство типов могут иметь более специфичные типы, они определяются по полю &lt;strong&gt;&lt;em&gt;Code&lt;/em&gt;&lt;/strong&gt;. &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1700.html&quot;&gt;RFC 1700&lt;/a&gt; определяет все основные типы и коды для протокола ICMP.&lt;/p&gt;

&lt;p&gt;В следующей таблице перечислены данные поля с их описанием&lt;/p&gt;

&lt;table&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th scope=&quot;col&quot;&gt;Тип&lt;/th&gt;
			&lt;th scope=&quot;col&quot;&gt;Код&lt;/th&gt;
			&lt;th scope=&quot;col&quot;&gt;Название&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;Echo Reply&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td colspan=&quot;1&quot; rowspan=&quot;14&quot;&gt;3&lt;/td&gt;
			&lt;td&gt;&amp;nbsp;&lt;/td&gt;
			&lt;td&gt;DESTINATION UNREACHABLE&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;Network Unreachable&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;1&lt;/td&gt;
			&lt;td&gt;Host Unreachable&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;2&lt;/td&gt;
			&lt;td&gt;Protocol Unreachable&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;3&lt;/td&gt;
			&lt;td&gt;Port Unreachable&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;4&lt;/td&gt;
			&lt;td&gt;Fragmentation Needed and Don&apos;t Fragment Flag Set&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;5&lt;/td&gt;
			&lt;td&gt;Source Route Failed&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;6&lt;/td&gt;
			&lt;td&gt;Destination Network Unknown&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;7&lt;/td&gt;
			&lt;td&gt;Destination Host Unknown&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;8&lt;/td&gt;
			&lt;td&gt;Source Host Isolated&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;9&lt;/td&gt;
			&lt;td&gt;Destination Network Administratively Prohibited&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;10&lt;/td&gt;
			&lt;td&gt;Destination Host Administratively Prohibited&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;11&lt;/td&gt;
			&lt;td&gt;Destination Network Unreachable for Type of Service&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;12&lt;/td&gt;
			&lt;td&gt;Destination Host Unreachable for Type of Service&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;4&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;SOURCE QUENCH (deprecated)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td colspan=&quot;1&quot; rowspan=&quot;5&quot;&gt;5&lt;/td&gt;
			&lt;td&gt;&amp;nbsp;&lt;/td&gt;
			&lt;td&gt;REDIRECT&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;Redirect Datagram for the Network (or Subnet)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;1&lt;/td&gt;
			&lt;td&gt;Redirect Datagram for the Host&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;2&lt;/td&gt;
			&lt;td&gt;Redirect Datagram for the Network and Type of Service&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;3&lt;/td&gt;
			&lt;td&gt;Redirect Datagram for the Host and Type of Service&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;6&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ALTERNATE HOST ADDRESS&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;8&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ECHO&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;9&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ROUTER ADVERTISEMENT&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;10&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ROUTER SELECTION&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td colspan=&quot;1&quot; rowspan=&quot;3&quot;&gt;11&lt;/td&gt;
			&lt;td&gt;&amp;nbsp;&lt;/td&gt;
			&lt;td&gt;TIME EXCEEDED&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;Time to Live Exceeded in Transmit&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;1&lt;/td&gt;
			&lt;td&gt;Fragment Reassembly Time Exceeded&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td colspan=&quot;1&quot; rowspan=&quot;4&quot;&gt;12&lt;/td&gt;
			&lt;td&gt;&amp;nbsp;&lt;/td&gt;
			&lt;td&gt;PARAMETER PROBLEM&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;Pointer Indicates the Error&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;1&lt;/td&gt;
			&lt;td&gt;Missing a Required Option&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;2&lt;/td&gt;
			&lt;td&gt;Bad Length&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;13&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;TIMESTAMP&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;14&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;TIMESTAMP REPLY&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;15&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;INFORMATION REQUEST (Obsolete)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;16&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;INFORMATION REPLY (Obsolete)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;17&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ADDRESS MASK REQUEST (Near-Obsolete)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;18&lt;/td&gt;
			&lt;td&gt;0&lt;/td&gt;
			&lt;td&gt;ADDRESS MASK REPLY (Near-Obsolete)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;30&lt;/td&gt;
			&lt;td&gt;-&lt;/td&gt;
			&lt;td&gt;Traceroute&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Данную информацию не следует учить, как и другую представленную в статьях, главное научиться понимать что это и для чего используется, остальное приходит с опытом работы. Тем более, что вся представленная информация общедоступна каждому из нас бесплатно.&lt;/p&gt;

&lt;p&gt;Одни из наиболее часто встречающихся примеров ICMP сообщений являются &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Echo&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reply&lt;/code&gt;. По &lt;a href=&quot;/assets/pcap/icmp.pcapng&quot;&gt;ссылке&lt;/a&gt; можно скачать дамп, показывающий выполнение команды &lt;em&gt;ping&lt;/em&gt; в сторону адреса 8.8.8.8. Ниже будут представлены вырезки &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Echo&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reply&lt;/code&gt; из данных дампов.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/icmp/icmp_request.png&quot;&gt;
          &lt;img src=&quot;/assets/images/icmp/icmp_request.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;ICMP Request&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/icmp/icmp_reply.png&quot;&gt;
          &lt;img src=&quot;/assets/images/icmp/icmp_reply.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;ICMP Reply&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Далеко не все типы пакетов ICMP можно встретить сегодня в современных сетях, но некоторые из них имеют важное значение для функционала маршрутизации, например, редирект - &lt;em&gt;ICMP Type 5&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Данный тип используется маршрутизаторами для уведомления других устройств о том, что для данного адреса назначения в текущей канальной среде следует использовать другой маршрутизатор.&lt;/p&gt;

&lt;p&gt;Предположим, что в одной канальной среде с конечным устройством есть два маршрутизатора &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt;. Маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; является шлюзом по умолчанию для конечного устройства. Конечное устройство отправляет пакет на маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt;, в свою очередь маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; имеет достижимость адреса на который отправил конечный хост через маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Получается, что маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; должен отправить пакет в тот же самый интерфейс на котором он получил изначальный пакет. Маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; отправляет пакет маршрутизатору &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt;, а также отправляет сообщение &lt;em&gt;ICMP Redirect&lt;/em&gt; конечному устройству, информируя его о том, что все следующие пакеты он должен отправлять непосредственно через маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt; (&lt;em&gt;имеется в виду только до сети, куда был отправлен первый пакет, все пакеты до других сетей отправляются также на шлюз по умолчанию&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&quot;практика&quot;&gt;Практика&lt;/h2&gt;

&lt;p&gt;Рассмотрим пример с ICMP Redirect на практике. Имеется простая схема с двумя маршрутизаторами в одной канальной среде&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/icmp/scheme_icmp_redirect.png&quot;&gt;
          &lt;img src=&quot;/assets/images/icmp/scheme_icmp_redirect.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Схема ICMP Redirect&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Вся адресация представлена на схеме. В качестве простоты эксперимента рассмотрим ситуацию когда клиент будет отправлять пинг на адрес внешнего интерфейса маршрутизатора &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt;, маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; является шлюзом для клиента.&lt;/p&gt;

&lt;p&gt;На маршрутизаторе &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; дополнительно настроен статический маршрут до сети 172.17.0.0/24 через адрес внутреннего интерфейса маршрутизатора &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router_Moscow#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;show ip route static
&lt;span class=&quot;go&quot;&gt;Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP
       a - application route
       + - replicated route, % - next hop override, p - overrides from PfR

Gateway of last resort is not set

      172.17.0.0/24 is subnetted, 1 subnets
S        172.17.0.0 [1/0] via 192.168.1.254
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router_Moscow#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Включив дебаг на маршрутизаторе &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; с помощью команды &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug ip icmp&lt;/code&gt;, можно заметить как данный маршрутизатор отправляет сообщение ICMP Redirect клиенту.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router_Moscow#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;debug ip icmp 
&lt;span class=&quot;go&quot;&gt;ICMP packet debugging is on
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router_Moscow#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;*Oct  9 11:46:43.504: ICMP: redirect sent to 192.168.1.100 for dest 172.17.0.254, use gw 192.168.1.254
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router_Moscow#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;При этом первый пакет на клиенте потеряется из-за того, что маршрутизатор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt; не будет знать куда отправлять ответ на первый &lt;em&gt;ICMP Request&lt;/em&gt; клиента, т.к. его кэш ARP будет пуст и ему придется отправить &lt;em&gt;ARP Request&lt;/em&gt; чтобы узнать MAC-адрес клиента.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/icmp/client_ping.png&quot;&gt;
          &lt;img src=&quot;/assets/images/icmp/client_ping.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Потеря первого пакета при пинге клиента&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Для того чтобы убедиться в правдивости моих слов предлагаю скачать дампы с двух интерфейсов маршрутизатора &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-London&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router-Moscow&lt;/code&gt; и посмотреть весь процесс самим.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;i class=&quot;fa fa-exclamation&quot;&gt;&lt;/i&gt;&lt;strong&gt; Помните:&lt;/strong&gt; так как все устройства находятся в общей широковещательной среде, то все пакеты отправленные на широковещательный адрес &lt;code&gt;ffff.ffff.ffff&lt;/code&gt; будут видны в каждом из дампов.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/pcap/Router_Moscow_int_gi0-0.pcapng&quot;&gt;Дамп&lt;/a&gt; с интерфейса gi0/0 маршрутизатора Router-Moscow
&lt;a href=&quot;/assets/pcap/Router_London_int_gi0-0.pcapng&quot;&gt;Дамп&lt;/a&gt; с интерфейса gi0/0 маршрутизатора Router-London&lt;/p&gt;

&lt;p&gt;По умолчанию редирект включен на устройствах cisco. Данное поведение можно отключить на интерфейсе, выполнив команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no ip redirects&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="icmp" /><summary type="html">Internet Control Message Protocol или просто ICMP описан в RFC 792. Данный протокол определяет набор различных сообщений, целью которых является управление сетью.</summary></entry><entry><title type="html">Разновидности протокола ARP</title><link href="https://iteducate.github.io/networks/arp_types/" rel="alternate" type="text/html" title="Разновидности протокола ARP" /><published>2021-10-05T09:00:00+03:00</published><updated>2021-10-05T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/arp_types</id><content type="html" xml:base="https://iteducate.github.io/networks/arp_types/">&lt;p&gt;В предыдущей статье был рассмотрен протокол ARP, структура и принцип его работы. Сегодня я хочу показать несколько разновидностей данного протокола, которые также иногда используются в сетях.&lt;/p&gt;

&lt;h2 id=&quot;proxy-arp&quot;&gt;Proxy ARP&lt;/h2&gt;

&lt;p&gt;Иногда его еще называют &lt;em&gt;promiscuous ARP&lt;/em&gt;, данный протокол описан в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc925.html&quot;&gt;RFC 925&lt;/a&gt; и &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1027.html&quot;&gt;RFC 1027&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Proxy ARP - это метод с помощью которого маршрутизаторы &lt;em&gt;могут сделать себя доступными для устройств&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Например, устройство с адресом 15.65.32.124/24 хочет отправить пакет на адрес 15.65.100.35/24, но на данном устройстве не настроен шлюз по умолчанию, поэтому устройство не знает как отправить на маршрутизатор пакет. В таком случае устройство генерирует ARP Request для адреса 15.65.100.35. Локальный маршрутизатор, получив данный запрос и зная как достичь сети 15.65.100.0, сгенерирует и отправит ответный пакет ARP Reply, в котором будет содержаться его собственный идентификатор канальной среды.&lt;/p&gt;

&lt;p&gt;Таким образом, маршрутизатор заставит устройство поверить, что интерфейс маршрутизатора и есть интерфейс с адресом 15.65.100.35. Все пакеты, которые будут генерироваться для данного адреса будут отправляться на интерфейс маршрутизатора. Данный пример является скорее исключением, потому что в современном мире всё же принято назначать адрес шлюза на устройство, для того чтобы не делать &lt;em&gt;дополнительных забот&lt;/em&gt; для сети.&lt;/p&gt;

&lt;p&gt;Второй вариант использования Proxy ARP - несовпадение масок на интерфейсах шлюза и устройств. Допустим на маршрутизаторе есть два интерфейса. Каждому из интерфейсов назначены адреса с /28 маской. Пусть будет на первом интерфейсе адрес 160.1.74.1/28, а на другом 160.1.74.28/28. Данные адреса на интерфейсах располагаются в разных подсетях.&lt;/p&gt;

&lt;p&gt;Клиентские устройства же сконфигурированы в той же сети 160.1.74.0, но с маской /24 и не имеют представления о существовании подсетей с /28 маской. Например, первый клиент имеет адрес 160.1.74.10/24, а второй клиент адрес 160.1.74.20/24.&lt;/p&gt;

&lt;p&gt;Для того чтобы первый смог отправить информацию второму ему необходимо создать запрос ARP Request. Маршрутизатор, получив пакет, распознает, что адрес назначения с его точки зрения находится в другой подсети и как и в первом случае отправит ответный пакет ARP Reply, в котором будет содержаться собственный идентификатор канальной среды маршрутизатора.&lt;/p&gt;

&lt;p&gt;Таким образом, Proxy ARP делает прозрачной топологию подсетей для клиентских устройств.&lt;/p&gt;

&lt;h2 id=&quot;gratuitous-arp&quot;&gt;Gratuitous ARP&lt;/h2&gt;

&lt;p&gt;Устройство иногда может создавать запрос ARP со своим собственным IP-адресом в качестве адреса назначения. Такой запрос ARP называется &lt;strong&gt;Gratuitous ARP&lt;/strong&gt; и может использоваться в следующих случаях:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Первый случай&lt;/strong&gt; - использование для проверки дублирования адресов в сети. Устройство, которое отправит ARP Request со своим собственным адресом в качестве адресата назначения в запросе и в ответ получит ARP Reply от другого устройства, сможет узнать, что данный адрес является дубликатом в сети&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Второй случай&lt;/strong&gt; - использование для того чтобы объявить свой новый идентификатор канальной среды. Если устройство получает ARP Request для IPv4 адреса, который уже есть в кэше ARP, то кэш будет обновлен, используя новый идентификатор канального уровня отправителя&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Третий случай&lt;/strong&gt; - использование маршрутизаторами протокола &lt;em&gt;Hot Standby Router Protocol&lt;/em&gt; (HSRP). В случае когда активный маршрутизатор теряет свою роль активного, резеврный маршрутизатор отправляет Gratuitous ARP для того чтобы обновить кэш ARP у устройств в той же подсети&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;По умолчанию Gratuitous ARP выключен на маршрутизаторах cisco. Для того чтобы отключить данное поведение, надо в режиме глобальной конфигурации ввести команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip gratuitous-arps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Подробно посмотреть GARP можно скачав данный &lt;a href=&quot;/assets/pcap/garp.pcapng&quot;&gt;дамп&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reverse-arp&quot;&gt;Reverse ARP&lt;/h2&gt;

&lt;p&gt;Вместо сопоставления идентификатора канальной среды с заранее известным IP-адресом, Reverse ARP позволяет сопоставить IP-адрес с заранее известным идентификатором канальной среды.&lt;/p&gt;

&lt;p&gt;Некоторые устройства после старта системы могут не знать свой IP-адрес. RARP может быть запрограммирован в программное обеспечение данных устройств, позволяя данному устройству выполнить ARP Request с идентификатором канальной среды самого устройства. Ответный RARP Reply будет содержать соответствующий IP-адрес.&lt;/p&gt;

&lt;p&gt;RARP был значительный образом вытеснен протоколом DHCP (&lt;strong&gt;&lt;em&gt;Dynamic Host Configuration Protocol&lt;/em&gt;&lt;/strong&gt;) - расширением протокола Bootstrap (BootP), каждый из которых предоставляет куда больше информации нежели один IP-адрес.&lt;/p&gt;

&lt;p&gt;Также более подробно посмотреть протокол RARP можно скачав этот &lt;a href=&quot;/assets/pcap/rarp.pcap&quot;&gt;дамп&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;практика&quot;&gt;Практика&lt;/h2&gt;

&lt;p&gt;Рассмотрим на практике второй вариант использования Proxy ARP. Возьмем схему и адресацию, указанную в описании метода использования Proxy ARP.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/type_arp/scheme_proxy_arp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/type_arp/scheme_proxy_arp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Схема Proxy ARP&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Выполнив все настройки адресации на интерфейсах клиентов и маршрутизатора, запустим ping между клиентами.&lt;/p&gt;

&lt;p&gt;Первоначально в таблице ARP на маршрутизаторе не присутстовали никакие записи, кроме записей собственных интерфейсов:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;show arp
&lt;span class=&quot;go&quot;&gt;Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  160.1.74.1              -   5000.0003.0000  ARPA   GigabitEthernet0/0
Internet  160.1.74.28             -   5000.0003.0001  ARPA   GigabitEthernet0/1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;После запуска ping на клиенте можно увидеть, что маршрутизатор отвечает на запрос клиента свой ответом, предварительно включив на маршрутизаторе &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug arp&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;*Oct  5 21:33:42.486: IP ARP: rcvd req src 160.1.74.10 5000.0001.0000, dst 160.1.74.20 GigabitEthernet0/0
*Oct  5 21:33:42.487: IP ARP: creating entry for IP address: 160.1.74.10, hw: 5000.0001.0000
*Oct  5 21:33:42.487: IP ARP: sent rep src 160.1.74.20 5000.0003.0000,
                 dst 160.1.74.10 5000.0001.0000 GigabitEthernet0/0
*Oct  5 21:33:42.489: IP ARP: creating incomplete entry for IP address: 160.1.74.20 interface GigabitEthernet0/1
*Oct  5 21:33:42.490: IP ARP: sent req src 160.1.74.28 5000.0003.0001,
                 dst 160.1.74.20 0000.0000.0000 GigabitEthernet0/1
*Oct  5 21:33:42.491: IP ARP: rcvd rep src 160.1.74.20 0050.0000.0200, dst 160.1.74.28 GigabitEthernet0/1
*Oct  5 21:33:42.493: IP ARP: rcvd req src 160.1.74.20 0050.0000.0200, dst 160.1.74.10 GigabitEthernet0/1
*Oct  5 21:33:42.494: IP ARP: sent rep src 160.1.74.10 5000.0003.0001,
                 dst 160.1.74.20 0050.0000.0200 GigabitEthernet0/1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Теперь на маршрутизаторе есть полная карта для всех устройств в сети&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;show arp
&lt;span class=&quot;go&quot;&gt;Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  160.1.74.1              -   5000.0003.0000  ARPA   GigabitEthernet0/0
Internet  160.1.74.10             8   5000.0001.0000  ARPA   GigabitEthernet0/0
Internet  160.1.74.20            16   0050.0000.0200  ARPA   GigabitEthernet0/1
Internet  160.1.74.28             -   5000.0003.0001  ARPA   GigabitEthernet0/1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Однако для того чтобы понять, что в сети настроен Proxy ARP надо обратиться к клиенту и проверить таблицу ARP у него.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/type_arp/arp_linux.png&quot;&gt;
          &lt;img src=&quot;/assets/images/type_arp/arp_linux.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Таблица ARP в Linux&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;В таблице можно заметить, что для двух разных IP-адресов идёт соответствие одинакового идентификатора канальной среды - MAC-адреса интерфейса Gi0/1 маршрутизатора. Это и есть признак того, что в сети работает Proxy ARP.&lt;/p&gt;

&lt;p&gt;По умолчанию Proxy ARP включен на маршрутизаторах cisco. Для того чтобы отключить данное поведение, надо ввести команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no ip proxy-arp&lt;/code&gt; на интерфейсе маршрутизатора.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="arp" /><summary type="html">В предыдущей статье был рассмотрен протокол ARP, структура и принцип его работы. Сегодня я хочу показать несколько разновидностей данного протокола, которые также иногда используются в сетях.</summary></entry><entry><title type="html">Структура и принцип работы протокола ARP</title><link href="https://iteducate.github.io/networks/arp_prot/" rel="alternate" type="text/html" title="Структура и принцип работы протокола ARP" /><published>2021-10-02T09:00:00+03:00</published><updated>2021-10-02T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/arp_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/arp_prot/">&lt;p&gt;Маршрутизаторы передают пакеты по какому-либо логическому пути, который состоит из определённого количества каналов передачи данных, &lt;em&gt;“читая” и “взаимодействуя”&lt;/em&gt; с сетевыми адресами. Пакеты, инкапсулированные в кадры (фреймы), передаются через канальную среду. Фреймы содержат уникальные идентификаторы канальной среды (&lt;em&gt;например, MAC-адреса&lt;/em&gt;) для определения адресата источника и назначения в канальной среде.&lt;/p&gt;

&lt;p&gt;Устройствам в канальной среде необходим способ определения идентификаторов канальной среды соседей для того чтобы фреймы могли быть отправлены корректному адресату назначения. Одним из таких механизмов определения для протокола &lt;a href=&quot;/networks/ip_prot/&quot;&gt;IP версии 4&lt;/a&gt; является протокол ARP - Address Resolution Protocol, описанный в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc826.html&quot;&gt;RFC 826&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;1-основы-работы-протокола-arp&quot;&gt;1. Основы работы протокола ARP&lt;/h2&gt;

&lt;p&gt;На рисунке 1 изображён процесс работы протокола ARP&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/process.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/process.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Процесс работы протокола ARP&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Устройство, которому необходимо узнать идентификатор канальной среды другого устройства, создает пакет &lt;strong&gt;ARP Request&lt;/strong&gt;. Данный запрос содержит в себе IP-адрес устройства для которого необходимо узнать идентификатор канального среды (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target&lt;/code&gt;), а также данные канальной среды (&lt;em&gt;в данном случае MAC-адрес&lt;/em&gt;) и IP-адрес устройства, которое данный запрос сформировало (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Пакет ARP Request инкапсулируется в фрейм. В качестве MAC-адреса источника выступает сам источник, в качестве MAC-адреса назначения используется broadcast адрес (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFFF.FFFF.FFFF&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Вот как выглядит ARP Request если захватить его с помощью wireshark&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/arp_request.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/arp_request.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;ARP Request&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Подробно рассмотреть каждое поле запроса ARP можно скачав данный &lt;a href=&quot;/assets/pcap/arp_request.pcapng&quot;&gt;дамп&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Broadcast адрес используется для того чтобы все узлы в канальной среде получили данный фрейм и обработали инкапсулированный внутри пакет. Все устройства, за исключением адресата назначения, поймут, что данный пакет не предназначается для них и попросту отбросят его. Устройство назначения обработает пакет и в ответ отправит &lt;strong&gt;ARP Reply&lt;/strong&gt; адресату источника. Внутри ARP Reply будет содержаться как раз-таки MAC-адрес адресата назначения.&lt;/p&gt;

&lt;p&gt;На следующем изображении можно увидеть как выглядит ARP Reply&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/arp_reply.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/arp_reply.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;ARP Reply&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Также скачав &lt;a href=&quot;/assets/pcap/arp_reply.pcapng&quot;&gt;дамп с трафиком&lt;/a&gt; можно более подробно увидеть каждое поле пакета&lt;/p&gt;

&lt;h2 id=&quot;2-структура-полей-протокола-arp&quot;&gt;2. Структура полей протокола ARP&lt;/h2&gt;

&lt;p&gt;Протокол ARP имеет следующие поля:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/structure_arp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/structure_arp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Формат протокола ARP&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Стоит напомнить, что формат протокола обычно показывается в разрезе 4 байт. Из-за этого часть информации из полей протокола может быть показана как часть следующих 4 байт (&lt;em&gt;на примере Hardware и IP адресации&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware Type&lt;/strong&gt; - 16-битное поле, определяющее &lt;em&gt;“тип канальной среды”&lt;/em&gt;. Наиболее часто используемые типы представлены в таблице ниже&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Номер&lt;/th&gt;
      &lt;th&gt;Тип среды&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Ethernet&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;15&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Frame Relay&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;HDLC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Fiber Channel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Serial Link&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Но основную часть всё же занимает именно Ethernet.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/hard_type.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/hard_type.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Hardware Type&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Protocol Type&lt;/strong&gt; - 16-битное поле, определяющее протокол сетевого уровня, который отправитель связывает с идентификатором канала передачи данных. Для протокола IP версии 4 значение данного поля равно &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0800&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/prot_type.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/prot_type.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Protocol Type&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Hardware Address Length&lt;/strong&gt; - 8-битное поле, определяющее длину идентификатора канальной среды в байтах. MAC-адреса имеет длину 48 бит или 6 байт.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/hard_length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/hard_length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Hardware Address Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Protocol Address Length&lt;/strong&gt; - 8-битное поле, определяющее длину адреса сетевого уровня в байтах. IP-адреса имеет длину 32 бита или 4 байта.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/prot_length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/prot_length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Protocol Address Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Operation&lt;/strong&gt; - 16-битное поле, которое определяет какой тип пакета ARP используется:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;ARP Request&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;ARP Reply&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Reverse ARP Request&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Reverse ARP Reply&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Inverse ARP Request&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Inverse ARP Reply&lt;/em&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/opcode.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/opcode.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Opcode&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Последние 20 байт приходятся на адресацию канальной среды и сетевого уровня источника и назначения запроса (MAC-адрес &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6 байт * 2&lt;/code&gt; + IP-адрес &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 байт * 2&lt;/code&gt; = 20)&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/mac_ip.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/mac_ip.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;MAC + IP адреса&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;3-практика&quot;&gt;3. Практика&lt;/h2&gt;

&lt;p&gt;Посмотрим небольшую практику на примере следующей схемы:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/scheme_arp.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/scheme_arp.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Схема №1&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Для того чтобы отследить пакеты arp на устройствах cisco можно воспользоваться утилитой &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt;. Для этого необходимо в привилегированном режиме выполнить команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug arp&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;debug arp
&lt;span class=&quot;go&quot;&gt;ARP packet debugging is on
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;*Oct  4 18:48:11.317: IP ARP: rcvd req src 185.14.32.135 0050.0000.0200, dst 185.14.32.1 GigabitEthernet0/0
*Oct  4 18:48:11.317: IP ARP: creating entry for IP address: 185.14.32.135, hw: 0050.0000.0200
*Oct  4 18:48:11.317: IP ARP: sent rep src 185.14.32.1 5000.0003.0000,
                 dst 185.14.32.135 0050.0000.0200 GigabitEthernet0/0
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;undebug all
&lt;span class=&quot;go&quot;&gt;All possible debugging has been turned off
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;i class=&quot;fa fa-exclamation&quot;&gt;&lt;/i&gt;&lt;strong&gt; Важно:&lt;/strong&gt; команда &lt;code&gt;debug&lt;/code&gt; очень требовательна к ресурсам, следует аккуратно использовать её на производстве. При неаккуратном задании параметров можно потерять доступ к устройству из-за постоянного спама сообщений в консоль.&lt;/p&gt;

&lt;p&gt;Для просмотра таблицы ARP на устройствах cisco можно выполнить команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show arp&lt;/code&gt; в привилегированном режиме. Для операционной системы Windows можно выполнить команду &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arp -a&lt;/code&gt;, а для Linux команда выглядит &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arp -vn&lt;/code&gt;. Примеры выполнения команд приведены ниже:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/arp_cisco.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/arp_cisco.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Cisco ARP table&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/arp_win.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/arp_win.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Windows ARP table&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/arp/arp_lin.png&quot;&gt;
          &lt;img src=&quot;/assets/images/arp/arp_lin.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Linux ARP table&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Стоит обратить внимание на колонку &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Age&lt;/code&gt; в выводе команды на маршрутизаторе. Данная колонка показывает через какое количество времени данная запись будет удалена из таблицы ARP. Это сделано для того чтобы предотвратить перегрузку таблицы ARP устаревшими записями.&lt;/p&gt;

&lt;p&gt;По умолчанию устройства cisco хранятся информацию у себя в таблице ARP в течение 4 часов, это можно проверить командой &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show interface &amp;lt;имя_интерфейса&amp;gt; | include ARP&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;show int gi0/0 | inc ARP
&lt;span class=&quot;go&quot;&gt;  Encapsulation ARPA, loopback not set
  ARP type: ARPA, ARP Timeout 04:00:00
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Поведение по умолчанию можно изменить, выполнив следующий набор команд (&lt;em&gt;настройка актуальна для отдельного интерфейса&lt;/em&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;conf t
&lt;span class=&quot;go&quot;&gt;Enter configuration commands, one per line.  End with CNTL/Z.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router(config)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;interface gi0/0
&lt;span class=&quot;gp&quot;&gt;Router(config-if)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;arp &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;1800
&lt;span class=&quot;gp&quot;&gt;Router(config-if)#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;end
&lt;span class=&quot;go&quot;&gt;*Oct  4 20:56:43.122: %SYS-5-CONFIG_I: Configured from console by console
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;show int gi0/0 | inc ARP
&lt;span class=&quot;go&quot;&gt;  Encapsulation ARPA, loopback not set
  ARP type: ARPA, ARP Timeout 00:30:00
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Для очистки ARP кэша можно выполнить команду&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;clear arp-cache
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;В следующий раз я вкратце рассмотрю другие разновидности протокола ARP: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proxy ARP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gratuitous ARP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reverse ARP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="arp" /><summary type="html">Маршрутизаторы передают пакеты по какому-либо логическому пути, который состоит из определённого количества каналов передачи данных, “читая” и “взаимодействуя” с сетевыми адресами. Пакеты, инкапсулированные в кадры (фреймы), передаются через канальную среду. Фреймы содержат уникальные идентификаторы канальной среды (например, MAC-адреса) для определения адресата источника и назначения в канальной среде.</summary></entry><entry><title type="html">Структура протокола IP</title><link href="https://iteducate.github.io/networks/ip_prot/" rel="alternate" type="text/html" title="Структура протокола IP" /><published>2021-09-25T09:00:00+03:00</published><updated>2021-09-25T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/ip_prot</id><content type="html" xml:base="https://iteducate.github.io/networks/ip_prot/">&lt;p&gt;Формат заголовка протокола IP состоит из определённого набора полей, которые описаны в &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc791.html&quot;&gt;RFC 791&lt;/a&gt;. Разбор данных полей важен для понимания процесса маршрутизации. Ниже я опишу данные поля и постараюсь показать их в реальности, используя Wireshark.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/images/ip/structure_ip.png&quot; alt=&quot;IP Header&quot; style=&quot;width:100%&quot; /&gt;
  &lt;figcaption align=&quot;center&quot;&gt;&lt;b&gt;Структура протокола IP&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt; - 4-битное поле, определяющее версию используемого протокола. В настоящее время используется две версии протокола - 4 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0100&lt;/code&gt;) версия и 6 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0110&lt;/code&gt;) версия.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/version.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/version.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Version&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Header Length&lt;/strong&gt; - 4-битное поле, которое показывает какова длина IP-заголовка &lt;em&gt;в 32-битных словах&lt;/em&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;strong&gt; Заметка:&lt;/strong&gt; Минимальный размер IP-заголовка - 20 байт (&lt;i&gt;сумма всех полей заголовка при пустом поле Options&lt;/i&gt;). Так как максимально в поле из 4 бит можно записать значение 15 (&lt;code&gt;1111&lt;/code&gt;), то максимальный размер IP-заголовка составляет &lt;code&gt;15 * 4 байта = 60 байт&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/header_length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/header_length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Header Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Type of Service&lt;/strong&gt; - 8-битное поле, может быть использовано для определения обработки пакета. В настоящее время данное поле переопределено как часть фреймворка &lt;em&gt;Differentiated Services&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Данный фреймворк позволяет более гибко обрабатывать IP-пакеты. Фреймворк DiffServe определяет классы обслуживания (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service classes&lt;/code&gt;) на маршрутизаторах, а затем позволяет производить сортировку согласно данным классам. Маршрутизатор может ставить в очередь и производить пересылку пакетов с различными уровнями приоритета в зависимости от их классификации. Каждая процедура постановки в очередь и пересылки называется PHB - &lt;a href=&quot;https://en.wikipedia.org/wiki/Per-hop_behaviour&quot;&gt;&lt;strong&gt;Per-Hop Behaviour&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В современном мире 6 бит поля Type of Service определено как поле DSCP - &lt;em&gt;DiffServe Code Point&lt;/em&gt;. Используя эти 6 бит, произвольно либо в соответствии с предопределенными в архитектуре DiffServe классами обслуживания, администратор может определить до 64 классов обслуживания, которые затем могут быть отсортированы в PHB.&lt;/p&gt;

&lt;p&gt;Оставшиеся 2 бита используется для поля ECN - &lt;strong&gt;Explicit Congestion Notification&lt;/strong&gt; - явное уведомление о перегрузках (&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3168.html&quot;&gt;RFC 3168&lt;/a&gt;). Если маршрутизатор поддерживает данный параметр, то поле примет значение &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt; в случае сигнализации о перегрузке.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/diffserve_ecn.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/diffserve_ecn.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;DiffServe and ECN&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Total Length&lt;/strong&gt; - 16-битное поле, определяет общую длину пакета, включая заголовок, в байтах. Вычитая длину заголовка можно получить размер данных. 16 бит может содержать максимальное значение в 65535, учитывая это получаем максимально возможное значение IP пакета - 65535 байт.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/total_length.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/total_length.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Total Length&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;16-битное поле &lt;strong&gt;Identifier&lt;/strong&gt; совместно с полями &lt;strong&gt;Flags&lt;/strong&gt; и &lt;strong&gt;Fragment Offset&lt;/strong&gt; используются для того чтобы показать был ли фрагментирован пакет или нет.&lt;/p&gt;

&lt;p&gt;Пакет будет фрагментирован на более мелкие пакеты в случае когда его размер превышает &lt;em&gt;Maximimum Transmition Unit (MTU)&lt;/em&gt; канальной среды через которую данный пакет будет передаваться.&lt;/p&gt;

&lt;p&gt;Например, в случае когда MTU канальной среды равен 1500 байт и по ней передаётся пакет размером 5000 байт, то максимальный размер пакета может содержать только 1500 байт информации. Маршрутизатор должен маркировать каждый фрагмент с тем же значением в поле &lt;em&gt;Identifier&lt;/em&gt; для того чтобы получающая сторона могла определить, что фрагменты относятся к одному и тому же пакету.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;strong&gt; Заметка:&lt;/strong&gt; фрагментированный пакет не собирается с каждой стороны канальной среды. Пакет остается фрагментированным до тех пор пока он не достигнет финальной точки назначения.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt; - 3-битное поле, первый бит в котором не используется. Второй бит - бит DF (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Don&apos;t Fragment&lt;/code&gt;). Когда данный бит установлен в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, то маршрутизатор не может фрагментировать пакет.&lt;/p&gt;

&lt;p&gt;Если пакет не может быть отправлен без фрагментации, маршрутизатор отбросит пакет и отправит источнику сообщение об ошибке пересылки. Данный функционал позволяет протестировать MTU в сети.&lt;/p&gt;

&lt;p&gt;Рассмотрим простую схему между двумя маршрутизаторами:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/scheme_ext_ping.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/scheme_ext_ping.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Схема №1&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;С помощью расширенной утилиты &lt;em&gt;ping&lt;/em&gt; на маршрутизаторах Cisco можно найти максимальный MTU между устройствами.&lt;/p&gt;

&lt;p&gt;Ниже представлен пример выполнения данной команды:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping
&lt;span class=&quot;go&quot;&gt;Protocol [ip]: 
Target IP address: 192.168.1.1
Repeat count [5]: 1
Datagram size [100]: 
Timeout in seconds [2]: 
Extended commands [n]: y
Ingress ping [n]: 
Source address or interface: 192.168.1.1
Type of service [0]: 
Set DF bit in IP header? [no]: y
Validate reply data? [no]: 
Data pattern [0x0000ABCD]: 
Loose, Strict, Record, Timestamp, Verbose[none]: 
Sweep range of sizes [n]: y
Sweep min size [36]: 1451
Sweep max size [18024]: 1550
Sweep interval [1]: 1
Type escape sequence to abort.
Sending 100, [1451..1550]-byte ICMP Echos to 192.168.1.1, timeout is 2 seconds:
Packet sent with a source address of 192.168.1.1 
Packet sent with the DF bit set
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!....................
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;..............................
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Success rate is 50 percent (50/100), round-trip min/avg/max = 1/1/1 ms
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Из вывода видно, что максимальный MTU равен 1500 байт. Существуют и другие способы как с помощью данной команды найти максимальный MTU между целой группой сетевых устройств.&lt;/p&gt;

&lt;p&gt;Например, возьмем следующую схему &lt;a name=&quot;Record Route&quot;&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/big_scheme_ext_ping.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/big_scheme_ext_ping.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Схема №2&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;В данной схеме на всех интерфейсах за исключением одного установлен MTU равный 1500 байт. Для того чтобы найти данный интерфейс мы также можем воспользоваться расширенной утилитой:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ping
&lt;span class=&quot;go&quot;&gt;Protocol [ip]: 
Target IP address: 163.19.203.170
Repeat count [5]: 1
Datagram size [100]: 
Timeout in seconds [2]: 
Extended commands [n]: y
Ingress ping [n]: 
Source address or interface: 
Type of service [0]: 
Set DF bit in IP header? [no]: y
Validate reply data? [no]: 
Data pattern [0x0000ABCD]: 
Loose, Strict, Record, Timestamp, Verbose[none]: r
Number of hops [ 9 ]: 
Loose, Strict, Record, Timestamp, Verbose[RV]: 
Sweep range of sizes [n]: y
Sweep min size [76]: 500
Sweep max size [18024]: 1500
Sweep interval [1]: 500
Type escape sequence to abort.
Sending 3, [500..1500]-byte ICMP Echos to 163.19.203.170, timeout is 2 seconds:
Packet sent with the DF bit set
Packet has IP options:  Total option bytes= 39, padded length=40
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; Record route: &amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)

Reply to request 0 (3 ms) (size 500).  Received packet has options
 Total option bytes= 40, padded length=40
 Record route:
   (192.168.172.50)
   (163.19.203.180)
   (163.19.203.170)
   (163.19.203.170)
   (192.168.172.60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   (192.168.172.50) &amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
 End of list

Reply to request 1 (3 ms) (size 1000).  Received packet has options
 Total option bytes= 40, padded length=40
 Record route:
   (192.168.172.50)
   (163.19.203.180)
   (163.19.203.170)
   (163.19.203.170)
   (192.168.172.60)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   (192.168.172.50) &amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
 End of list

Unreachable from 192.168.172.60, maximum MTU 1200 (size 1500).  Received packet has options
 Total option bytes= 39, padded length=40
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; Record route: &amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)
   (0.0.0.0)

Success rate is 66 percent (2/3), round-trip min/avg/max = 3/3/3 ms
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Router#&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Из вывода видно, что максимальный MTU в данной схеме равен 1200 байт.&lt;/p&gt;

&lt;p&gt;Третий бит в поле &lt;strong&gt;Flags&lt;/strong&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;More Fragment&lt;/code&gt;. Когда маршрутизатор фрагментирует пакет, он записывает значение равное &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; в данный бит, за исключением последнего фрагмента. Этот бит необходим принимающей стороне для того чтобы определить где заканчивается фрагментированный пакет.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fragment Offset&lt;/strong&gt; - 13-битное поле, определяющее смещение от начала заголовка до начала фрагмента. Так как фрагменты не всегда могут приходить в правильном порядке, то данное поле позволяет принимающей стороне собрать фрагментированный пакет в правильном порядке.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;i class=&quot;fa fa-exclamation&quot;&gt;&lt;/i&gt;&lt;strong&gt; Важно:&lt;/strong&gt; в случае если в процессе передачи фрагментированного пакета теряется хотя бы один пакет, то весь пакет будет переслан заново. Таким образом, это может привести к непропорциональным задержкам в сети.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/identif_flag_offset.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/identif_flag_offset.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Поля Identifier, Flags, Fragment Offset&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Time to Live&lt;/strong&gt; или просто &lt;em&gt;TTL&lt;/em&gt; - 8-битное поле, в которое записывается некоторое число в момент создания пакета.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/ttl.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/ttl.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Time to Live&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;По мере передачи пакета от одного маршрутизатора до другого, каждый из них будет уменьшать данное число. Если значение данного поля станет равным нулю, пакет будет отброшен и источнику пакета будет отправлено сообщение об ошибке пересылки. Данный механизм позволяет предотвратить бесконечное блуждание пакета по сети.&lt;/p&gt;

&lt;p&gt;Современные маршрутизаторы в независимости от задержки уменьшают значение TTL на единицу. Рекомендуемое значение по умолчанию 64. Однако, встречаются и другие реализации в зависимости от операционной системы.&lt;/p&gt;

&lt;p&gt;Некоторые утилиты для трасировки маршрута используют значение поля TTL. Пример выполнения трассировки приведён ниже:&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/traceroute.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/traceroute.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Traceroute&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Protocol&lt;/strong&gt; - 8-битное поле, определяющее номер вышестоящего протокола, которому предназначена передаваемая информация в пакете.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/protocol.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/protocol.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Protocol&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Ниже в таблице представлены одни из наиболее часто используемых протоколов, но данный список далеко не полный, каким может казаться на первый взгляд.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Номер протокола&lt;/th&gt;
      &lt;th&gt;Название протокола&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Internet Control Message Protocol - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICMP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Internet Group Management Protocol - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGMP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;IP in IP (encapsulation)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Transmission Control Protocol - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;User Datagram Protocol - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;47&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Generic Routing Encapsulation - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRE&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;89&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Open Shortest Path First - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSPF&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Header Checksum&lt;/strong&gt; - поле, определяющее ошибки в заголовке IP. Чексумма не вычисляется для содержимого IP пакета. Практически каждый вышестоящий протокол (&lt;em&gt;будь то TCP, UDP, ICMP, etc.&lt;/em&gt;) имеет свои механизмы вычисления ошибок.&lt;/p&gt;

&lt;p&gt;Данное поле представляет собой 16-битное значение, вычисляемое отправителем пакета. Принимающая сторона снова вычисляет данное значение и если значения сходятся, то считается, что чексумма &lt;em&gt;не битая&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/checksum.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/checksum.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Header Checksum&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;strong&gt; Важно:&lt;/strong&gt; стоит помнить, что каждый маршрутизатор уменьшает значение поля TTL, поэтому значение чексуммы должно рассчитывается на каждом маршрутизаторе! &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1624&quot;&gt;RFC 1624&lt;/a&gt; более подробно описывает процесс вычисления чексуммы в протоколе IP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source and Destination Addresses&lt;/strong&gt; - 32-битный адреса источника и назначения пакета. Формат адресов представляет собой 4 десятичных числа от &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; до &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;255&lt;/code&gt;, разделенных точкой.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/ip/src_dst.png&quot;&gt;
          &lt;img src=&quot;/assets/images/ip/src_dst.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;&lt;strong&gt;Source and Destination IP Addresses&lt;/strong&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt; - поле переменной длины, как следует из описания используется для дополнительных опций.&lt;/p&gt;

&lt;p&gt;Данное поле используется в основном для тестирования. Наиболее часто используемые опции:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Loose source routing&lt;/strong&gt; - используется список IP-адресов, через которые должен пройти пакет, однако, на этом пути могут быть и другие адреса через которые не запрещено проходить&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Strict source routing&lt;/strong&gt; - в отличие от предыдущего варианта, пакет должен пройти через строго отведенные адреса. В случае если следующий адрес не находится в списке адресов, то возникает ошибка.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Record route&lt;/strong&gt; - как и в случае трассировки маршрута, обеспечивает аналогичную функцию, за тем лишь исключением, что отображаются исходящие интерфейсы как на пути к месту назначения, так и на обратном пути. Данный механизм был показан ранее при выявлении &lt;a href=&quot;#Record Route&quot;&gt;максимального MTU в сети из нескольких устройств&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Timestamp&lt;/strong&gt; - отличается от &lt;em&gt;Record route&lt;/em&gt; тем, что отслеживает не только где проходил пакет, но и когда.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Padding&lt;/strong&gt; - используется для наполнения заголовка нулями (&lt;em&gt;после поля Options&lt;/em&gt;), гарантируя, что граница конца заголовка проходит по 32 биту.&lt;/p&gt;

&lt;p&gt;Для подробного анализа трафика можно скачать файл с дампом трафика, открыть его с помощью анализатора трафика &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; и пройтись по тем полям, которые были описаны выше в данной статье.&lt;/p&gt;

&lt;p&gt;Также прикладываю файл топологий &lt;a href=&quot;https://www.eve-ng.net/&quot;&gt;Eve-Ng&lt;/a&gt;, которые я использовал для тестирования прохождения трафика в данной статье (&lt;em&gt;это лишь файл топологии, конфигурацию экспортировать нет возможности, т.к. у меня нет pro-версии Eve-Ng, но всегда можно обратиться ко мне напрямую и я поделюсь копипастом конфига. Образы устройств можно найти на просторах необъятного, а также использовать лицензионные образы устройств&lt;/em&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/pcap/ip.pcap&quot;&gt;дамп трафика&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/eve/lab1.zip&quot;&gt;топология eve-ng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;em&gt;вся информация представленная здесь используется исключительно в образовательных целях. Все совпадения с реальными объектами, адресами, именами и т.д. случайна и не несёт цели получить от этого выгоду или причинить кому-либо вред.&lt;/em&gt;&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="protocols" /><category term="ip" /><summary type="html">Формат заголовка протокола IP состоит из определённого набора полей, которые описаны в RFC 791. Разбор данных полей важен для понимания процесса маршрутизации. Ниже я опишу данные поля и постараюсь показать их в реальности, используя Wireshark.</summary></entry><entry><title type="html">RFC</title><link href="https://iteducate.github.io/networks/rfc/" rel="alternate" type="text/html" title="RFC" /><published>2021-09-24T09:00:00+03:00</published><updated>2021-09-24T09:00:00+03:00</updated><id>https://iteducate.github.io/networks/rfc</id><content type="html" xml:base="https://iteducate.github.io/networks/rfc/">&lt;p&gt;Список RFC, которые будут встречаться по ходу написания статей:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc791.html&quot;&gt;RFC 791 - Internet Protocol&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc792.html&quot;&gt;RFC 792 - Internet Control Message Protocol&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc793.html&quot;&gt;RFC 793 - Transmission Control Protocol&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc768.html&quot;&gt;RFC 768 - User Datagram Protocol&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc826.html&quot;&gt;RFC 826 - An Ethernet Address Resolution Protocol&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc925.html&quot;&gt;RFC 925 - Multi-LAN Address Resolution&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1027.html&quot;&gt;RFC 1027 - Using ARP to Implement Transparent Subnet Gateways&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1624&quot;&gt;RFC 1624 - Computation of the Internet Checksum via Incremental Update&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1700.html&quot;&gt;RFC 1700 - Assigned Numbers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3168.html&quot;&gt;RFC 3168 - The Addition of Explicit Congestion Notification (ECN) to IP&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ivan Denisenko</name></author><category term="networks" /><category term="rfc" /><summary type="html">Список RFC, которые будут встречаться по ходу написания статей:</summary></entry><entry><title type="html">Необычный взгляд на редактирование текста. Часть I.</title><link href="https://iteducate.github.io/editors/vim_1/" rel="alternate" type="text/html" title="Необычный взгляд на редактирование текста. Часть I." /><published>2019-11-11T09:00:00+03:00</published><updated>2019-11-11T09:00:00+03:00</updated><id>https://iteducate.github.io/editors/vim_1</id><content type="html" xml:base="https://iteducate.github.io/editors/vim_1/">&lt;p&gt;Каждому из нас хоть раз в жизни приходилось иметь дело с обработкой текстовых документов. Дело казалось бы обыденное, открыл &lt;em&gt;“офис”&lt;/em&gt; и вперёд, но некоторые до сих пор его не любят за то, что в нём куча ненужных для них вещей, а кто-то просто откровенно ими не умеет пользоваться. :)&lt;/p&gt;

&lt;p&gt;Данный набор советов не претендует на то, чтобы полностью заменить вам ваш привычный текстовый редактор. Однако здесь я покажу вам как с помощью бесплатной и самое главное мощной утилиты сделать редактирование текста максимально быстро и эффективно.&lt;/p&gt;

&lt;p&gt;Первое, что необходимо вам понимать, это то, что данная утилита довольно-таки сложна для начального уровня и требует некоторого понимая работы в &lt;strong&gt;командной строке&lt;/strong&gt; (&lt;em&gt;да, исходная программа, которая называется &lt;strong&gt;*vi&lt;/strong&gt;&lt;/em&gt;, не имеет графического интерфейса&lt;em&gt;). И хотя я буду показывать все примеры в командной строке, эти же примеры можно повторить в программе *Vim&lt;/em&gt;, которая как раз имеет данный графический интерфейс и немногим облегчит вам работу.&lt;/p&gt;

&lt;p&gt;Вторым пунктом я хотел бы выделить именно тот факт, что я не хочу чтобы вы уходили от того же MS Office, (&lt;em&gt;да и функционал в данной программе несколько иной&lt;/em&gt;), я лишь хочу показать то, как не имея лицензии на крупные программные продукты, а также надобности в &lt;em&gt;тяжелом&lt;/em&gt; редактировании текста, использовать действительно полезный и главное очень эффективный продукт.&lt;/p&gt;

&lt;p&gt;Итак, пустимся же в “весёлое приключение” по небольшой Вселенной Vi и Vim!&lt;/p&gt;

&lt;h1 id=&quot;1-это-необходимо-знать&quot;&gt;1. Это необходимо знать&lt;/h1&gt;

&lt;p&gt;Прежде чем приступить к написанию советов, хотелось бы остановиться на паре моментов, которые необходимо помнить.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Установка.&lt;/strong&gt; Скачать и установить ПО вы можете по &lt;a href=&quot;https://www.vim.org/download.php&quot; title=&quot;Download VIM&quot;&gt;&lt;strong&gt;данной ссылке&lt;/strong&gt;&lt;/a&gt;. Сложного в установке нет ничего, поэтому я верю в то, что вы справитесь. Я же буду использовать версию vi, которая есть в моем текстовом редакторе VS Code. Не пугайтесь! Всё, что я буду делать, вы сможете сделать и в Vim, установленный лично вами.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Примеры.&lt;/strong&gt; Всё, что я буду выполнять, будет сопровождаться gif-анимационным файлом, в котором будут показаны все клавиши, задействованные в данном примере. Это очень удобно, как мне кажется, и вы сможете всегда вернуться и разобрать непонятный вам материал (&lt;em&gt;хотя я очень верю, что такового не будет!&lt;/em&gt;). К сожалению, исходники самих примеров я выкладывать никуда не буду, поэтому вам придется на личных примерах разбираться как использовать ту или иную команду. Это поможет вам более тщательнее изучить весь материал и более подробно разобраться в интерфейсе и командах программы.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Слепая печать.&lt;/strong&gt; Пожалуй, это единственное условие, которое необходимо выполнить прежде чем приступить к изучению Vim. Вам действительно будет тяжело разобраться в некоторых моментах без данного навыка, так как эфффективность работы в данной программе достигается за счёт ловкости рук!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;2-совет--1-повторение---мать-учения&quot;&gt;2. Совет № 1. Повторение - мать учения&lt;/h1&gt;

&lt;p&gt;В повседной работе мы не замечаем как часто выполняем одни и те же операции: &lt;em&gt;“скопировал - вставил”&lt;/em&gt;, &lt;em&gt;“скопировал - вставил”&lt;/em&gt; и так десятки, а то и сотни раз всеразличных комбинаций клавиш. Если мы сможем как-то упростить выполнение одних и тех же операций, то сэкономим большое количество времени.&lt;/p&gt;

&lt;p&gt;Редактор Vim позволяет отслеживать последние выполняемые операции и затем повторять их снова и снова, пока нам это будет необходимо. Однако, прежде чем приступить к редактированию какого-либо текста, необходимо упомянуть о двух основных режимах работы редактора Vim:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;командный режим&lt;/strong&gt; - обыкновенное состояние редактора, в котором выполняются все команды, за исключение главной функции редактора - &lt;strong&gt;&lt;em&gt;редактирование текста&lt;/em&gt;&lt;/strong&gt;. И это следует понимать, потому что очень часто возникают казусы, по которым люди не понимают различия в режимах и тем самым не могут найти решение в той или иной проблеме.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;режим вставки&lt;/strong&gt; - как понятно из названия, в данном режиме происходит набор необходимого нам текста.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;При входе в программу вы попадаете в &lt;strong&gt;командный режим&lt;/strong&gt;, а при нажатии клавиши &lt;code&gt;i&lt;/code&gt; в &lt;strong&gt;режим вставки&lt;/strong&gt;. Для того чтобы вернуться обратно в командный режим необходимо нажать клавишу &lt;code&gt;Esc&lt;/code&gt;. Как видим ничего сложного нет!&lt;/p&gt;

&lt;div class=&quot;notice--success&quot;&gt;
Как узнать в каком режиме вы сейчас находитесь? Очень просто, в режиме вставки в левом нижнем углу будет надпись &lt;code&gt;--ВСТАВКА--&lt;/code&gt; или &lt;code&gt;--INSERT--&lt;/code&gt; (если у вас установлена англоязычная версия). При выходе в командный режим данная надпись исчезает.
&lt;/div&gt;

&lt;p&gt;Итак, для того чтобы повторить последнее изменение, в редакторе Vim существует команда &lt;strong&gt;&lt;em&gt;“точка”&lt;/em&gt;&lt;/strong&gt;. Данная команда одна из самых мощных и гибких в редакторе. При этом, под &lt;em&gt;“последними изменениями”&lt;/em&gt; понимается изменение как над отдельными символами, целыми строками или даже файлами!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Краткая справка по командам.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Все команды выполняются в &lt;strong&gt;командном режиме&lt;/strong&gt;!&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;h&lt;/code&gt; - шаг влево&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;j&lt;/code&gt; - шаг вниз&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;k&lt;/code&gt; - шаг вверх&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;l&lt;/code&gt; - шаг вправо&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;x&lt;/code&gt; - удаление символа под курсором&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;u&lt;/code&gt; - отменить последнее изменение&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;dd&lt;/code&gt; - удаление целой строки&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Текущие команды будут использоваться в нашем первом примере. Вы увидите каким образом происходит перемещение по файлу, удаление символа, строки, а также повторение этих же действий с использованием магической команды &lt;em&gt;“точка”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;В качестве примера я возьму небольшую программу и в ней проведу все наши эксперименты.&lt;/p&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/vim/dd.gif&quot;&gt;
          &lt;img src=&quot;/assets/images/vim/dd.gif&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;Пример 1. Демонстрация применения команды &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;точка&lt;/code&gt;
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Обратите внимание на то, где расположен курсор и какие изменения происходят после выполнения определенной команды. А еще лучше, возьмите произвольный текст и поиграйтесь сами, выполняя различные команды.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Замечание!!!&lt;/strong&gt; Для того чтобы выйти из данного редактора, особенно если вы выполняете упражнения в командной строке, необходимо выполнить одну из комбинаций клавиш:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; - выход из программы без сохранения&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; - выход из программы c сохранением&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Не забывайте, что команды выполняются в &lt;strong&gt;командном режиме&lt;/strong&gt;!!!&lt;/p&gt;

  &lt;p&gt;Данная проблема очень популярна в интернете, так как начинающие пользователи не имеют представления как выйти из данного редактора. По этому поводу есть даже небольшая заметка в &lt;a href=&quot;https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/&quot;&gt;блоге stackoverflow&lt;/a&gt;. Там отмечено, что помощью по вопросу выхода из Vim воспользовалось более 1 млн. человек!!!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Ivan Denisenko</name></author><category term="editors" /><category term="vim" /><summary type="html">Каждому из нас хоть раз в жизни приходилось иметь дело с обработкой текстовых документов. Дело казалось бы обыденное, открыл “офис” и вперёд, но некоторые до сих пор его не любят за то, что в нём куча ненужных для них вещей, а кто-то просто откровенно ими не умеет пользоваться. :)</summary></entry><entry><title type="html">Исторические личности: Часть 1</title><link href="https://iteducate.github.io/%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F/bismark/" rel="alternate" type="text/html" title="Исторические личности: Часть 1" /><published>2017-10-22T13:52:00+03:00</published><updated>2017-10-22T13:52:00+03:00</updated><id>https://iteducate.github.io/%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F/bismark</id><content type="html" xml:base="https://iteducate.github.io/%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F/bismark/">&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/history/bis1.jpg&quot;&gt;
          &lt;img src=&quot;/assets/images/history/bis1.jpg&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;Отто фон Бисмарк
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;1 апреля 2015 года исполнилось 200 лет со дня рождения князя, государственного деятеля Германии, первого канцлера Германской империи Отто Эдуарда Леопольда фон Бисмарка.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Отто Эдуард Леопольд фон Бисмарк &lt;a href=&quot;https://dic.academic.ru/dic.nsf/sie/2142&quot;&gt;родился 1 апреля 1815 года&lt;/a&gt; в семье мелкопоместных дворян в поместье Шёнгаузен в Бранденбурге. Выходец из померанского юнкерства.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dhm.de/lemo/biografie/otto-bismarck&quot;&gt;Изучал юриспруденцию&lt;/a&gt; сначала в университете в Геттингене, затем в университете в Берлине. В 1835 году получил диплом, в 1936 году проходил стажировку в Берлинском муниципальном суде.&lt;/p&gt;

&lt;p&gt;В 1837-1838 годах работал чиновником в Ахене, затем в Потсдаме.&lt;/p&gt;

&lt;p&gt;В 1838 году поступил на военную службу.&lt;/p&gt;

&lt;p&gt;В 1839 году после смерти матери уволился со службы и занимался управлением семейными владениями в Померании.&lt;/p&gt;

&lt;p&gt;После смерти отца в 1845 году семейная собственность была разделена, и Бисмарк &lt;a href=&quot;http://www.krugosvet.ru/enc/istoriya/BISMARK_OTTO_FON.html&quot;&gt;получил поместья Шёнхаузен и Книпхоф&lt;/a&gt; в Померании.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dic.academic.ru/dic.nsf/enc3p/73306&quot;&gt;В 1847-1848 годах&lt;/a&gt; — депутат первого и второго Соединенных ландтагов (парламент) Пруссии, во время революции 1848 года выступал за вооруженное подавление волнений.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://encyclopedia.mil.ru/encyclopedia/dictionary/details.htm?id=3403@morfDictionary&quot;&gt;Бисмарк&lt;/a&gt; стал известен благодаря своей консервативной позиции в ходе конституционной борьбы в Пруссии в 1848-1850 годах.&lt;/p&gt;

&lt;p&gt;Противодействуя либералам, он способствовал созданию различных политических организаций и газет, включая “Новую прусскую газету” (Neue Preussische Zeitung, 1848). Один из организаторов прусской партии консерваторов.&lt;/p&gt;

&lt;p&gt;Был депутатом нижней палаты парламента Пруссии в 1849 году и Эрфуртского парламента в 1850 году.&lt;/p&gt;

&lt;p&gt;В 1851-1859 годах — представитель Пруссии в союзном сейме во Франкфурте-на-Майне.&lt;/p&gt;

&lt;p&gt;С 1859 года по 1862 год Бисмарк был посланником Пруссии в России.&lt;/p&gt;

&lt;p&gt;В марте — сентябре 1962 года — прусский посланник во Франции.&lt;/p&gt;

&lt;p&gt;В сентябре 1862 года, во время конституционного конфликта между прусской королевской властью и либеральным большинством прусского ландтага, Бисмарк был призван королем Вильгельмом I на пост главы прусского правительства, а в октябре того же года стал министром-президентом и министром иностранных дел Пруссии. Он упорно отстаивал права короны и добился разрешения конфликта в ее пользу. В 1860-х годах осуществил военную реформу в стране, значительно усилил армию.&lt;/p&gt;

&lt;p&gt;Под руководством Бисмарка было осуществлено объединение Германии путем “революции сверху” в результате трех победоносных войн Пруссии: в 1864 году совместно с Австрией против Дании, в 1866 году — против Австрии, в 1870-1871 годах — против Франции.&lt;/p&gt;

&lt;p&gt;После образования Северо-Германского союза в 1867 году Бисмарк стал бундесканцлером. В провозглашенной 18 января 1871 года Германской империи он получил высший государственный пост имперского канцлера, став первым рейхсканцлером. В соответствии с конституцией 1871 года Бисмарк получил практически неограниченную власть. При этом он сохранил пост прусского премьер-министра и министра иностранных дел.&lt;/p&gt;

&lt;p&gt;Бисмарк провел реформы германского права, системы управления и финансов. В 1872-1875 годах по инициативе и под давлением Бисмарка были приняты направленные против католической церкви законы о лишении духовенства права надзора за школами, о запрещении иезуитского ордена в Германии, об обязательном гражданском браке, об отмене статей конституции, предусматривавших автономию церкви и др. Эти мероприятия серьезно ограничили права католического духовенства. Попытки неподчинения вызывали репрессии.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dic.academic.ru/dic.nsf/biograf/2686&quot;&gt;В 1878 году&lt;/a&gt; Бисмарк провел через рейхстаг “исключительный закон” против социалистов, запрещавший деятельность социал-демократических организаций. Он беспощадно преследовал всякое проявление политической оппозиции, за что был прозван “железным канцлером”.&lt;/p&gt;

&lt;p&gt;В 1881-1889 годах Бисмарк провел “социальные законы” (о страховании рабочих на случай болезни и на случай увечья, о пенсиях по старости и инвалидности), заложившие основы социального страхования рабочих. Вместе с тем он требовал ужесточения антирабочей политики и в течение 1880-х годов успешно добивался продления “исключительного закона”.&lt;/p&gt;

&lt;p&gt;Свою внешнюю политику Бисмарк строил, исходя из ситуации, сложившейся в 1871 году после поражения Франции во франко-прусской войне и захвата Германией Эльзаса и Лотарингии, способствовал дипломатической изоляции Французской республики и стремился предотвратить образование любой коалиции, угрожавшей гегемонии Германии. Опасаясь конфликта с Россией и желая избежать войны на два фронта, Бисмарк поддержал создание русско-австро-германского соглашения (1873) “Союз трёх императоров”, а также заключил с Россией в 1887 году “договор перестраховки”. Вместе с тем в 1879 году по его инициативе заключён договор о союзе с Австро-Венгрией, а в 1882 году — Тройственный союз (Германии, Австро-Венгрии и Италии), направленный против Франции и России и положивший начало расколу Европы на две враждебные коалиции. Германская империя стала одним из лидеров международной политики. Отказ России от возобновления “договора перестраховки” в начале 1890 года явился серьезной неудачей канцлера, как и провал его плана превращения “исключительного закона” против социалистов в постоянно действующий. В январе 1890 года рейхстаг отказался возобновить его.&lt;/p&gt;

&lt;p&gt;В марте 1890 года Бисмарк был уволен в отставку с поста рейхсканцлера и прусского премьер-министра в результате противоречий с новым императором Вильгельмом II и с военным командованием по вопросам внешней и колониальной политики и по рабочему вопросу. Он получил титул герцога Лауэнбургского, но от него отказался.&lt;/p&gt;

&lt;p&gt;Последние восемь лет жизни Бисмарк провел в своем имении Фридрихсруэ. В 1891 году он был избран в рейхстаг от Ганновера, но так никогда и не занял там своего места, а двумя годами позже отказался выставить свою кандидатуру для переизбрания.&lt;/p&gt;

&lt;p&gt;Отто фон Бисмарк является автором книги “Мысли и воспоминания” (Gedanken und Erinnerungen).&lt;/p&gt;

&lt;p&gt;Он скончался 30 июля 1898 года в Гамбурге.&lt;/p&gt;

&lt;p&gt;C 1847 года Бисмарк был женат на Йоханне фон Путткамер (умерла в 1894 году). У супругов было трое детей — дочь Мари (1848-1926) и два сына — Герберт (1849-1904) и Вильгельм (1852-1901).&lt;/p&gt;</content><author><name>Ivan Denisenko</name></author><category term="история" /><category term="history" /><summary type="html">Отто фон Бисмарк</summary></entry></feed>